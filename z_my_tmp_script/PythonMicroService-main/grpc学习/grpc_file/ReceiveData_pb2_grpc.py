# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ReceiveData_pb2 as ReceiveData__pb2
from google.protobuf import wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2


class LabelServiceStub(object):
    """这是供java端调用时用到的，咱们python的不用管
    option java_package = "xx.xx.core.grpc.lib.label";
    option java_multiple_files = true;

    package label;

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.receiveSample = channel.unary_unary(
                '/LabelService/receiveSample',
                request_serializer=ReceiveData__pb2.SampleRequestList.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
                )


class LabelServiceServicer(object):
    """这是供java端调用时用到的，咱们python的不用管
    option java_package = "xx.xx.core.grpc.lib.label";
    option java_multiple_files = true;

    package label;

    """

    def receiveSample(self, request, context):
        """*
        样本集接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LabelServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'receiveSample': grpc.unary_unary_rpc_method_handler(
                    servicer.receiveSample,
                    request_deserializer=ReceiveData__pb2.SampleRequestList.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LabelService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LabelService(object):
    """这是供java端调用时用到的，咱们python的不用管
    option java_package = "xx.xx.core.grpc.lib.label";
    option java_multiple_files = true;

    package label;

    """

    @staticmethod
    def receiveSample(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LabelService/receiveSample',
            ReceiveData__pb2.SampleRequestList.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
